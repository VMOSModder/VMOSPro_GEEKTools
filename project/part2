


}
launch(){
if [ "$NAME" == "init" ]; then
check_folder
ln -s . $DIRNAME/system_root
( rm -rf $DIRNAME/dev/.geektool_unblock; rm -rf $DIRNAME/dev/.geektool_done ) &
mv -f $DIRNAME/tool_files/log.txt $DIRNAME/tool_files/._old_log.txt
if [ "$(grep_prop DISABLE_GEEKTOOL /sdcard/vmospro/tool_config.prop)" != "true" ]; then
rm -rf "$DIRNAME/dev/work-geektool"
logcat "geektools init ($VERSIONCODE) started on pre-init stage"
if [ -f "$DIRNAME/vmos.prop" ]; then
logcat "find prop_file: /vmos.prop"
VMOSPROPS=/vmos.prop
elif [ -f "$DIRNAME/system.prop" ]; then
logcat "find prop_file: /system.prop"
VMOSPROPS=/system.prop
else
logcat "cannot find vmos prop_file"
fi
( [ -f "$DIRNAME/system/bin/toybox" ] || exit
cd $DIRNAME/system/bin || exit
for e in $toyboxes; do
maybe_lnf "toybox" "$e" true &
done
for e in $toolboxes; do
maybe_lnf "toolbox" "$e" true &
done
maybe_lnf_3264 dalvikvm true &
maybe_lnf_3264 app_process true &
maybe_lnf grep egrep true &
maybe_lnf grep fgrep true &
maybe_lnf ip6tables ip6tables-restore true &
maybe_lnf ip6tables ip6tables-save true &
maybe_lnf iptables iptables-restore true &
maybe_lnf iptables iptables-save true &
) &
chmod -R 777 $DIRNAME/tool_files
cat $DIRNAME/tool_files/work/.boot/delete.list | while read delfile; do
( [ ! "$delfile" ] && exit
[ "$delfile" == "/system" ] && exit
[ "$(readlink -f "$DIRNAME/$delfile")" == "$(readlink -f "$DIRNAME/system")" ] && exit
[ "$delfile" ] && rm -rf "$DIRNAME/$delfile" && logcat "remove: $delfile" ) &
done
rm -rf $DIRNAME/tool_files/work/.boot/delete.list
logcat geektools add new file to system
cp -R $DIRNAME/tool_files/work/.boot/system/* $DIRNAME/system
rm -rf $DIRNAME/tool_files/work/.boot/system/*
rm -rf $DIRNAME/tool_files/work/.boot/system/.*
logcat "extract all geektools files to /tool_files/main"
tool_files &
mkdir -p $DIRNAME/tool_files/binary
random_str=work-geektool
#setup new PATH variable to place su binary for hiding root
base_path=$DIRNAME/tool_files/binary
base_path2=/tool_files/binary
work_path=$DIRNAME/dev/$random_str
work_path2=/system_root/dev/$random_str
rm -rf /tool_files/binary/.workpath
echo -n "$work_path2" >$DIRNAME/tool_files/binary/.workpath
# link base_path to work_path, where su binary will be available for any app
logcat "set up working path: $work_path2"
ln -s $base_path $work_path
[ ! -f $DIRNAME/init.rc.orig ] && mv -f $DIRNAME/init.rc $DIRNAME/init.rc.orig
chmod 777 $DIRNAME/sbin
rm -rf $DIRNAME/sbin/ueventd
ln -s $DIRNAME/dev/init $DIRNAME/sbin/ueventd
rm -rf $DIRNAME/sbin/watchdogd
ln -s $DIRNAME/dev/init $DIRNAME/sbin/watchdogd
logcat "add working path $work_path2 to PATH"
echo "#INIT.RC BY HUSKYDG \non init\n   export PATH /sbin:/system/bin:/system/xbin:/system/sbin:/vendor/bin:$work_path2 \n\n\nimport /init.rc.orig\n\non init\n   export PATH /sbin:/system/bin:/system/xbin:/system/sbin:/vendor/bin:$work_path2 \n" >$DIRNAME/init.rc
logcat "inject geektools services into init.rc"
TOOL00D1=`random 5 str`; TOOL00D2=`random 5 str`; TOOL00D3=`random 5 str`; TOOL00D4=`random 5 str`
echo "\non early-init \n  stop $TOOL00D4\n  start $TOOL00D4\n\n  service $TOOL00D4 /system/bin/sh /tool_files/main/main.sh early-init\n    class core\n    user root\n    group root\n    oneshot\n\non init \n  stop $TOOL00D3\n  start $TOOL00D3\n\n  service $TOOL00D3 /system/bin/sh /tool_files/main/main.sh init\n    class core\n    user root\n    group root\n    oneshot\n  \n\non post-fs-data\n\n  stop $TOOL00D1\n  rm /system_root/dev/.geektool_unblock\n  start $TOOL00D1\n \n  wait /system_root/dev/.geektool_unblock 40\n  rm /system_root/dev/.geektool_unblock\n \n  service $TOOL00D1 /system/bin/sh /tool_files/main/main.sh post-fs-data \n    class core\n    user root\n    group root\n    oneshot\n  \n\n  \non late_start \n  stop $TOOL00D2\n  start $TOOL00D2 \n  service $TOOL00D2 /system/bin/sh /tool_files/main/main.sh late_start\n    class core\n    user root\n    group root\n    oneshot\n  \n" >>$DIRNAME/init.rc
chmod 777 $DIRNAME/init.rc; [ ! -f "$DIRNAME/dev/init" ] && cp $DIRNAME/init.real $DIRNAME/dev/init; chmod 777 $DIRNAME/dev/init; chmod 777 $DIRNAME/$VMOSPROPS
( TIMEZONE="$(getprop persist.sys.timezone)"
mod_prop persist.sys.timezone "$TIMEZONE" $DIRNAME/default.prop && logcat "prop: change persist.sys.timezone to $TIMEZONE"
mod_prop persist.sys.timezone "$TIMEZONE" $DIRNAME/defanlt.prop && logcat "prop: change persist.sys.timezone to $TIMEZONE" )&
echo "persist.root.enable=1\nro.huskydg.initmode=true\nro.huskydg.geektool=$VERSIONCODE\nro.huskydg.rootfs=$DIRNAME\nro.boot.flash.locked=1\nro.boot.verifiedbootstate=green\nro.boot.veritymode=enforcing\nro.boot.vbmeta.device_state=locked" >$DIRNAME/.tmp_props
sed -i "/ro.huskydg./d" "$DIRNAME/default.prop"; sed -i "/ro.huskydg./d" "$DIRNAME/defanlt.prop";
[ -f "/sdcard/vmospro/tool_config.prop" ] && disable_props=`grep_prop DISABLE_PROPS /sdcard/vmospro/tool_config.prop`
[ ! "$disable_props" == "true" ] && echo "import /tool_files/system.prop" >>$DIRNAME/.tmp_props && logcat "load /tool_files/system.prop"
rm -rf $DIRNAME/tool_files/work/script/late_start.d/random_props
if [ "$(grep_prop persist.geektool.randomid $DIRNAME/tool_files/system.prop)" == "1" ]; then
logcat "randomize identifier props"
RANDOMSERI=`random 8`
mod_prop ro.serialno $RANDOMSERI $DIRNAME/$VMOSPROPS
mod_prop ro.boot.serialno $RANDOMSERI $DIRNAME/$VMOSPROPS
mod_prop ro.bluetooth.address "`random 2`:`random 2`:`random 2`:`random 2`:`random 2`:`random 2`" $DIRNAME/$VMOSPROPS
( echo "setprop rf.mac \"`random 2`:`random 2`:`random 2`:`random 2`:`random 2`:`random 2`\" 
setprop vmprop.simserialnumber `random 20 number` 
setprop vmprop.line1number `random 11 number` 
setprop vmprop.imei `random 15 number` 
setprop vmprop.wifibssid \"`random 2`:`random 2`:`random 2`:`random 2`:`random 2`:`random 2`\" 
setprop vmprop.androidid `random 16` " >$DIRNAME/tool_files/work/script/late_start.d/random_props ) &
fi

echo "##ORIGINAL PROPS HERE" >>$DIRNAME/.tmp_props
cat $DIRNAME/$VMOSPROPS >>$DIRNAME/.tmp_props
mv -f $DIRNAME/$VMOSPROPS $DIRNAME/tool_files/vmos.prop
mv -f $DIRNAME/.tmp_props $DIRNAME/$VMOSPROPS
chmod -R 777 $DIRNAME/tool_files
logcat load busybox
BBDIR=$DIRNAME/tool_files/main/busybox
EXDIR=$DIRNAME/tool_files/main/exbin
chmod -R 777 $BBDIR
cp $BBDIR/busybox $EXDIR/wget
cp $BBDIR/busybox.vmos $EXDIR/busybox
APPLETS="$bb_applets"
    for applet in $APPLETS; do
            ( rm -rf $EXDIR/$applet; ln -fs busybox $EXDIR/$applet) & 2>$no
    done
sleep 0.1; logcat "init started"
$DIRNAME/dev/init $VALUE_INIT &
sleep 0.2
mv -f $DIRNAME/tool_files/vmos.prop $DIRNAME/$VMOSPROPS
chmod -R 777 $DIRNAME/tool_files
sleep 2
# sh $DIRNAME/init.tool
logcat "hide the init.rc modified by geektools"
mv $DIRNAME/init.rc $DIRNAME/tool_files/init.rc
mv $DIRNAME/init.rc.orig $DIRNAME/init.rc
logcat "all geektools init jobs done!"
touch $DIRNAME/dev/.geektool_done
sed -i "s/TOOL001/$TOOL00D1/g" $DIRNAME/tool_files/binary/geektool
sed -i "s/TOOL002/$TOOL00D2/g" $DIRNAME/tool_files/binary/geektool
sed -i "s/TOOL003/$TOOL00D3/g" $DIRNAME/tool_files/binary/geektool
sed -i "s/TOOL004/$TOOL00D4/g" $DIRNAME/tool_files/binary/geektool
else
logcat "disabled geektool, don't load anything"
$DIRNAME/dev/init $VALUE_INIT &
sleep 3
fi
elif [ "$NAME" == "init.tool" ]; then
mv -f $DIRNAME/init $DIRNAME/init.real
mv -f $DIRNAME/init.tool $DIRNAME/init
fi
}
[ ! "$VALUE" == "x" ] && launch 2>/dev/null; [ "$VALUE" == "x" ] && tool_files 2>/dev/null